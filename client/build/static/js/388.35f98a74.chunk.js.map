{"version":3,"file":"static/js/388.35f98a74.chunk.js","mappings":"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","sources":["places/screens/UpdatePlace.tsx","webpack://client/./src/shared/components/FormElements/Input.module.css?800c","shared/components/FormElements/Input.tsx","webpack://client/./src/shared/components/UIElements/Card.module.css?5bd3","shared/components/UIElements/Card.tsx","shared/hooks/useForm-hook.ts","shared/utils/validators.ts","webpack://client/./src/places/screens/PlaceForm.module.css?b34f"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MIN_LENGTH,\r\n} from \"../../shared/utils/validators\";\r\nimport {\r\n  AuthContextType,\r\n  AuthContext,\r\n} from \"../../shared/context/auth/auth-context\";\r\nimport { useForm } from \"../../shared/hooks/useForm-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/useHttpClient-hook\";\r\nimport styles from \"./PlaceForm.module.css\";\r\n\r\nimport { PlaceModel } from \"../models/place.model\";\r\n\r\ninterface ResponseData {\r\n  place: PlaceModel;\r\n}\r\n\r\nfunction UpdatePlace(): React.ReactElement {\r\n  const navigate = useNavigate();\r\n  const placeId = useParams().placeId;\r\n  const authCtx = useContext<AuthContextType>(AuthContext);\r\n  const [loadedPlace, setLoadedPlace] = useState<PlaceModel>();\r\n  const { error, isLoading, sendRequest, clearError } = useHttpClient();\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    async function fetchPlace(): Promise<void> {\r\n      try {\r\n        const responseData = await sendRequest<ResponseData>({\r\n          url: `${process.env.REACT_APP_SERVER_URL}/places/${placeId}`,\r\n        });\r\n        if (responseData.place) {\r\n          setLoadedPlace(() => responseData.place);\r\n          setFormData(\r\n            {\r\n              title: {\r\n                value: responseData.place.title,\r\n                isValid: true,\r\n              },\r\n              description: {\r\n                value: responseData.place.description,\r\n                isValid: true,\r\n              },\r\n            },\r\n            true\r\n          );\r\n        }\r\n      } catch (error: any) {\r\n        console.log(error);\r\n      }\r\n    }\r\n\r\n    fetchPlace();\r\n  }, [placeId, sendRequest, setFormData]);\r\n\r\n  async function placeSubmitHandler(\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ): Promise<void> {\r\n    event.preventDefault();\r\n    try {\r\n      await sendRequest({\r\n        url: `${process.env.REACT_APP_SERVER_URL}/places/${placeId}`,\r\n        method: \"PATCH\",\r\n        headers: {\r\n          Authorization: \"Bearer \" + authCtx.token,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value,\r\n        }),\r\n      });\r\n      navigate(`/${authCtx.userId}/places`);\r\n    } catch (error: any) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  if (!loadedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner asOverlay />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlace && (\r\n        <form\r\n          className={`${styles[\"place-form\"]}`}\r\n          onSubmit={placeSubmitHandler}\r\n        >\r\n          <Input\r\n            id=\"title\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            onInput={inputHandler}\r\n            initialValid={formState.inputs.title.isValid}\r\n            initialValue={formState.inputs.title.value?.toString()}\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid title.\"\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            type=\"textarea\"\r\n            label=\"Description\"\r\n            onInput={inputHandler}\r\n            initialValid={formState.inputs.description.isValid}\r\n            initialValue={formState.inputs.description.value?.toString()}\r\n            validators={[VALIDATOR_MIN_LENGTH(5)]}\r\n            errorText=\"Please enter a valid description (at least 5 characters).\"\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdatePlace;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form-control\":\"Input_form-control__4leYh\",\"form-control--invalid\":\"Input_form-control--invalid__JOT1a\"};","import React, { useEffect, useReducer } from \"react\";\r\n\r\nimport validate, { ValidatorType } from \"../../utils/validators\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nfunction inputReducer(\r\n  state: {\r\n    step: number;\r\n    value: string;\r\n    isValid: boolean;\r\n    isTouched: boolean;\r\n  },\r\n  action: {\r\n    type: string;\r\n    step?: number;\r\n    value?: string;\r\n    validators?: { type: ValidatorType; value: string }[];\r\n  }\r\n) {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        step: action.step || state.step,\r\n        value: action.value || \"\",\r\n        isValid: validate(action.value || \"\", action.validators),\r\n      };\r\n    case \"TOUCH\":\r\n      return {\r\n        ...state,\r\n        isTouched: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\ninterface InputProps {\r\n  id: string;\r\n  type: string;\r\n  label: string;\r\n  errorText: string;\r\n  initialValid?: boolean;\r\n  initialValue?: string | number;\r\n  validators?: { type: ValidatorType; value: string }[];\r\n  rows?: number;\r\n  min?: number;\r\n  max?: number;\r\n  placeholder?: string;\r\n  onInput?: (a: string, b: string, c: boolean) => void;\r\n}\r\n\r\nfunction Input(props: InputProps): React.ReactElement {\r\n  const [inputState, dispatchInputState] = useReducer(inputReducer, {\r\n    step: 1,\r\n    value: props.initialValue?.toString() || \"\",\r\n    isValid: props.initialValid || false,\r\n    isTouched: false,\r\n  });\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    if (onInput) {\r\n      onInput(id, value, isValid);\r\n    }\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  function changeHandler(\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ): void {\r\n    if (event.target.type === \"number\") {\r\n      let inputStepValue = 1;\r\n      if (Number.isInteger(parseFloat(event.target.value))) {\r\n        inputStepValue = 1;\r\n      } else if (event.target.value.trim().length !== 0) {\r\n        const decimalPlaces = (event.target.value.split(\".\")[1] || \"\").length;\r\n        inputStepValue = parseFloat(`0.${\"0\".repeat(decimalPlaces - 1)}1`);\r\n      }\r\n      dispatchInputState({\r\n        type: \"CHANGE\",\r\n        step: inputStepValue,\r\n        value: event.target.value,\r\n        validators: props.validators,\r\n      });\r\n    } else {\r\n      dispatchInputState({\r\n        type: \"CHANGE\",\r\n        value: event.target.value,\r\n        validators: props.validators,\r\n      });\r\n    }\r\n  }\r\n\r\n  function touchHandler(): void {\r\n    dispatchInputState({\r\n      type: \"TOUCH\",\r\n    });\r\n  }\r\n\r\n  const inputElement =\r\n    props.type === \"textarea\" ? (\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        min={props.min}\r\n        max={props.max}\r\n        step={props.type === \"number\" ? inputState.step : undefined}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={`${styles[\"form-control\"]} ${\r\n        !inputState.isValid && inputState.isTouched\r\n          ? styles[\"form-control--invalid\"]\r\n          : \"\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {inputElement}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__1-V8Z\"};","import React from \"react\";\r\n\r\nimport styles from \"./Card.module.css\";\r\n\r\ninterface CardProps extends React.PropsWithChildren {\r\n  className?: string;\r\n  style?: Object;\r\n}\r\n\r\nfunction Card(props: CardProps): React.ReactElement {\r\n  return (\r\n    <div className={`${styles.card} ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\ntype InitialInputs = {\r\n  [key: string]: {\r\n    value: string | File | null;\r\n    isValid: boolean;\r\n  };\r\n};\r\n\r\ntype FormReducerState = {\r\n  inputs: InitialInputs;\r\n  isValid: boolean;\r\n};\r\n\r\ntype FormReducerAction = {\r\n  type: string;\r\n  isValid: boolean;\r\n  value?: string | File;\r\n  inputId?: string;\r\n  inputs?: InitialInputs;\r\n};\r\n\r\ntype InputHandlerFunction = (\r\n  id: string,\r\n  value: string | File | undefined,\r\n  isValid: boolean\r\n) => void;\r\n\r\ntype SetFormDataFunction = (\r\n  inputData: InitialInputs,\r\n  formValidity: boolean\r\n) => void;\r\n\r\nfunction formReducer(state: FormReducerState, action: FormReducerAction) {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n      if (action.inputId) {\r\n        return {\r\n          ...state,\r\n          inputs: {\r\n            ...state.inputs,\r\n            [action.inputId]: {\r\n              value: action.value ?? state.inputs[action.inputId].value,\r\n              isValid: action.isValid,\r\n            },\r\n          },\r\n          isValid: formIsValid,\r\n        };\r\n      }\r\n      break;\r\n    case \"SET_DATA\":\r\n      return {\r\n        inputs: action.inputs || state.inputs,\r\n        isValid: action.isValid || state.isValid,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n  return {\r\n    ...state,\r\n  };\r\n}\r\n\r\nexport function useForm(\r\n  initialInputs: InitialInputs,\r\n  initialFormValidity?: boolean\r\n): [FormReducerState, InputHandlerFunction, SetFormDataFunction] {\r\n  const [formState, dispatchFormState] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity || false,\r\n  });\r\n\r\n  const inputHandler: InputHandlerFunction = useCallback(\r\n    (id, value, isValid) => {\r\n      dispatchFormState({\r\n        type: \"INPUT_CHANGE\",\r\n        inputId: id,\r\n        value: value,\r\n        isValid: isValid,\r\n      });\r\n    },\r\n    []\r\n  );\r\n\r\n  const setFormData: SetFormDataFunction = useCallback(\r\n    (inputData, formValidity) => {\r\n      dispatchFormState({\r\n        type: \"SET_DATA\",\r\n        inputs: inputData,\r\n        isValid: formValidity,\r\n      });\r\n    },\r\n    []\r\n  );\r\n\r\n  return [formState, inputHandler, setFormData];\r\n}\r\n","export enum ValidatorType {\r\n  REQUIRE = \"REQUIRE\",\r\n  NUMBER = \"NUMBER\",\r\n  MIN_LENGTH = \"MIN_LENGTH\",\r\n  MAX_LENGTH = \"MAX_lENGTH\",\r\n  MIN = \"MIN\",\r\n  MAX = \"MAX\",\r\n  EMAIL = \"EMAIL\",\r\n  FILE = \"FILE\",\r\n}\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({\r\n  type: ValidatorType.REQUIRE,\r\n  value: \"\",\r\n});\r\nexport const VALIDATOR_NUMBER = () => ({\r\n  type: ValidatorType.NUMBER,\r\n  value: \"\",\r\n});\r\nexport const VALIDATOR_MIN_LENGTH = (value: string | number) => ({\r\n  type: ValidatorType.MIN_LENGTH,\r\n  value: value.toString(),\r\n});\r\nexport const VALIDATOR_MAX_LENGTH = (value: string | number) => ({\r\n  type: ValidatorType.MAX_LENGTH,\r\n  value: value.toString(),\r\n});\r\nexport const VALIDATOR_MIN = (value: string | number) => ({\r\n  type: ValidatorType.MIN,\r\n  value: value.toString(),\r\n});\r\nexport const VALIDATOR_MAX = (value: string | number) => ({\r\n  type: ValidatorType.MAX,\r\n  value: value.toString(),\r\n});\r\nexport const VALIDATOR_EMAIL = () => ({ type: ValidatorType.EMAIL, value: \"\" });\r\nexport const VALIDATOR_FILE = () => ({ type: ValidatorType.FILE, value: \"\" });\r\n\r\nexport default function validate(\r\n  value: string,\r\n  validators?: { type: ValidatorType; value: string | number }[]\r\n): boolean {\r\n  let isValid = true;\r\n  if (validators) {\r\n    for (const validator of validators) {\r\n      if (validator.type === ValidatorType.REQUIRE) {\r\n        isValid = isValid && value.trim().length > 0;\r\n      }\r\n      if (validator.type === ValidatorType.NUMBER) {\r\n        isValid = isValid && typeof +value.trim() === \"number\";\r\n      }\r\n      if (validator.type === ValidatorType.MIN_LENGTH) {\r\n        isValid = isValid && value.trim().length >= +validator.value;\r\n      }\r\n      if (validator.type === ValidatorType.MAX_LENGTH) {\r\n        isValid = isValid && value.trim().length <= +validator.value;\r\n      }\r\n      if (validator.type === ValidatorType.MIN) {\r\n        isValid = isValid && +value >= +validator.value;\r\n      }\r\n      if (validator.type === ValidatorType.MAX) {\r\n        isValid = isValid && +value <= +validator.value;\r\n      }\r\n      if (validator.type === ValidatorType.EMAIL) {\r\n        isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n      }\r\n    }\r\n  }\r\n  return isValid;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"place-form\":\"PlaceForm_place-form__PS6qS\"};"],"names":["_formState$inputs$tit","_formState$inputs$des","navigate","useNavigate","placeId","useParams","authCtx","useContext","AuthContext","_useState","useState","_useState2","_slicedToArray","loadedPlace","setLoadedPlace","_useHttpClient","useHttpClient","error","isLoading","sendRequest","clearError","_useForm","useForm","title","value","isValid","description","_useForm2","formState","inputHandler","setFormData","_placeSubmitHandler","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","event","wrap","_context2","prev","next","preventDefault","url","concat","process","method","headers","Authorization","token","body","JSON","stringify","inputs","userId","t0","console","log","stop","apply","arguments","useEffect","_fetchPlace","_callee","responseData","_context","sent","place","fetchPlace","_jsxs","_Fragment","children","_jsx","ErrorModal","onClear","className","LoadingSpinner","asOverlay","styles","onSubmit","_x","Input","id","type","label","onInput","initialValid","initialValue","toString","validators","VALIDATOR_REQUIRE","errorText","VALIDATOR_MIN_LENGTH","Button","disabled","Card","inputReducer","state","action","_objectSpread","step","validate","isTouched","props","_props$initialValue","_useReducer","useReducer","_useReducer2","inputState","dispatchInputState","changeHandler","target","inputStepValue","Number","isInteger","parseFloat","trim","length","decimalPlaces","split","repeat","touchHandler","inputElement","rows","placeholder","onChange","onBlur","min","max","undefined","htmlFor","style","formReducer","_action$value","formIsValid","inputId","_defineProperty","initialInputs","initialFormValidity","dispatchFormState","useCallback","inputData","formValidity","ValidatorType","REQUIRE","VALIDATOR_NUMBER","NUMBER","MIN_LENGTH","VALIDATOR_MIN","MIN","VALIDATOR_MAX","MAX","VALIDATOR_EMAIL","EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","MAX_LENGTH","test","err","e","f"],"sourceRoot":""}